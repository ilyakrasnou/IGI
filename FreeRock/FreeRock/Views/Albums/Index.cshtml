@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>
<div>
    @await Component.InvokeAsync("NewAlbums")
</div>
<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input id="search-string" type="text" name="SearchString" value="" />
            <select id="select-sort-by">
                <option value="Title">названию</option>
                <option value="CreatedDate" selected >новизне</option>
                <option value="ReleaseDate">дате выпуска</option>
            </select>
            <select id="select-sort-order">
                <option value="asc" selected>by ascending</option>
                <option value="desc">by descending</option>
            </select>
            <input type="button" value="Search" class="btn btn-default" onclick="updateContent()" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<div>

    <div class="container album-container" id="album-container">
    </div>

    <div class="pagination" id="pagination">
        <button id="prev-page-btn" onClick="changePage(-1)" disabled>
            <<
        </button>
        <button id="next-page-btn" onClick="changePage(1)" disabled>
            >>
        </button>
    </div>

</div>

<script type="text/javascript">

    const pagination = {
        currentPage: 1,
        lastPage: 1,
        perPage: 2
    };

    let content = [];

    checkDisable = () => {
        $("#prev-page-btn").attr("disabled", false);
        $("#next-page-btn").attr("disabled", false);
        if (pagination.currentPage == 1) {
            $("#prev-page-btn").attr("disabled", true);
        }
        if (pagination.currentPage == pagination.lastPage) {
            $("#next-page-btn").attr("disabled", true);
        }
    };

    changePage = (x) => {
        const newPage = pagination.currentPage + x;
        if (newPage > 0 && newPage <= pagination.lastPage) {
            pagination.currentPage = newPage;
        }
        updateContent();
    };

    updateContent = () =>
        $.ajax({
            cache: false,
            url: '@Url.Action("GetAlbums", "Albums")',
            type: 'GET',
            data: {
                page: pagination.currentPage,
                perPage: pagination.perPage,
                searchString: $("#search-string").val(),
                sortBy: $("#select-sort-by").val(),
                sortOrder: $("#select-sort-order").val()
            },
            success: result => {
                pagination.lastPage = result.lastPage;
                content = result.data.map(e =>
                    ({
                        img: e.coverPath,
                        title: e.title,
                        artistName: e.artistName,
                        releaseDate: e.releaseDate,
                        createdDate: e.createdDate,
                        id: e.id
                    })
                );
                updateFlex();
                checkDisable();
            }
        })

    updateFlex = () => {
        const container = $("#album-container");
        container.empty();
        content.forEach(e =>
            container.append(
                `<div class="content">
                    <a href="/Albums/${e.id}">
                        <img src="${e.img}" width="100%"/>
                    </a>
                    <div>${e.title}</div>
                </div>`
            ));
    };

    $().ready(function () {
        updateContent();
        updateFlex();
    });

</script>

<style type="text/css">

    div.album-container {
        display: flex;
        flex-wrap: wrap;
    }

    div.content {
        width: 20%;
        padding: 10px;
        margin: 2px;
        border: 1px solid #EEEEEE;
        border-radius: 20px;
    }
</style>
